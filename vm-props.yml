---
- name: Playbook - VM Customization
  hosts: all
  gather_facts: False
  vars:
    vm_name: pipo
    vcenter_hostname: 10.211.55.49
    vcenter_datacenter: Datacenter
    vm_template: rhel77_template
    vm_debug:
  tasks:

  - name: Deploy VM from vCenter template
    vmware_guest:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      datacenter: "{{ vcenter_datacenter }}"
      state: present
      folder: /Datacenter/vm
      template: "{{ vm_template }}"
      name: "{{ vm_name }}"
    delegate_to: 127.0.0.1
    register: vm_deploy_result

  - name: Configure VM metadata
    template:
      src: ./templates/metadata.json.j2
      dest: "/tmp/{{ vm_name }}-metadata.json"
    delegate_to: 127.0.0.1
    register: metadata_results
    when: vm_name is defined

  - name: Configure VM metadata network
    template:
      src: ./templates/network.config.yaml.j2
      dest: "/tmp/{{ vm_name }}-network.config.yaml"
    delegate_to: 127.0.0.1
    register: metadata_network_results
    when: vm_name is defined

  - name: Configure VM userdata
    template:
      src: ./templates/userdata.yaml
      dest: "/tmp/{{ vm_name }}-userdata.yaml"
    delegate_to: 127.0.0.1
    register: userdata_results
    when: vm_name is defined

  - name: Convert VM metadata into base64
    #shell: echo $(gzip -c9 </tmp/{{ vm_name }}-metadata.json | { base64 -w0 2>/dev/null || base64; })
    shell: echo $(sed 's~NETWORK_CONFIG~'"$(gzip -c9 </tmp/{{ vm_name}}-network.config.yaml | { base64 -w0 2>/dev/null || base64; } )"'~' </tmp/{{ vm_name }}-metadata.json | gzip -9 | { base64 -w0 2>/dev/null || base64; })
    delegate_to: 127.0.0.1
    register: vm_metadata_base64_result
    when: vm_name is defined

#  - name: Convert VM metadata network into base64
#    shell: echo $(gzip -c9 </tmp/{{ vm_name }}-metadata.network.json | { base64 -w0 2>/dev/null || base64; })
#    delegate_to: 127.0.0.1
#    register: vm_metadata_network_base64_result
#    when: vm_name is defined

  - name: Convert VM userdata into base64
    shell: echo $(gzip -c9 </tmp/{{ vm_name }}-userdata.yaml | { base64 -w0 2>/dev/null || base64; })
    delegate_to: 127.0.0.1
    register: vm_userdata_base64_result
    when: vm_name is defined

  - name: Set VM guest properties with govc
    shell: govc vm.change -vm "/Datacenter/vm/{{ vm_name }}" -e guestinfo.metadata="{{ vm_metadata_base64_result.stdout }}" -e guestinfo.metadata.encoding="gzip+base64" -e guestinfo.metadata.network="{{ vm_metadata_network_base64_result.stdout }}" -e guestinfo.metadata.network.encoding="gzip+base64" -e guestinfo.userdata="{{ vm_userdata_base64_result.stdout }}" -e guestinfo.userdata.encoding="gzip+base64"
    environment:
      GOVC_PASSWORD: "{{ vcenter_password }}"
      GOVC_INSECURE: true
      GOVC_URL: "https://{{ vcenter_hostname }}"
      GOVC_USERNAME: "{{ vcenter_username }}"
    delegate_to: 127.0.0.1
    register: govc_result
    when: vm_metadata_base64_result.rc == 0 and vm_userdata_base64_result.rc == 0

  - name: Set powerstate of VM to poweredon by using VM name
    vmware_guest:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      name: "{{ vm_name }}"
      state: poweredon
      wait_for_customization: yes
    delegate_to: 127.0.0.1
    when: govc_result.rc == 0

#  - name: Clean VM guest properties with govc
#    shell: govc vm.change -vm "/Datacenter/vm/{{ vm_name }}" -e guestinfo.metadata="" -e guestinfo.metadata.encoding=""  -e guestinfo.userdata="" -e guestinfo.userdata.encoding=""
#    environment:
#      GOVC_PASSWORD: "{{ vcenter_password }}"
#      GOVC_INSECURE: true
#      GOVC_URL: "https://{{ vcenter_hostname }}"
#      GOVC_USERNAME: "{{ vcenter_username }}"
#    delegate_to: 127.0.0.1
#    register: govc_result
#    when: vm_debug is defined








