---
- name: Deploy VM template from scratch
  hosts: provision
  gather_facts: no
  tasks:

    - name: Create a RHEL virtual machine
      vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        datacenter: "{{ vcenter_datacenter }}"
        folder: /Datacenter/vm/
        name: "{{ vm_name }}"
        state: poweredoff
        customization_spec: "{{ vm_customization_spec }}"
        guest_id: "{{ vm_guest_id }}"
        datastore: "{{ vm_datastore }}"
        cdrom:
          type: iso
          iso_path: "{{ vm_iso }}"
        hardware:
          memory_mb: "{{ vm_memory_mb }}"
          num_cpus: "{{ vm_num_cpus }}"
          scsi: "{{ vm_scsi }}"
        wait_for_ip_address: no
      delegate_to: localhost
      register: vm_result

    - debug: msg="{{ vm_result }}"

    - name: Configure VM Disks
      vmware_guest_disk:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        datacenter: "{{ vcenter_datacenter }}"
        name: "{{ vm_name }}"
        disk:
          - size_gb:  "{{ vm_disk.disk.size_gb }}"
            type:  "{{ vm_disk.disk.type }}"
            datastore: "{{ vm_disk.disk.datastore }}"
            scsi_controller: "{{ vm_disk.disk.scsi_controller }}"
      loop: "{{ vm_disks }}"
      loop_control:
        loop_var: vm_disk
      delegate_to: localhost
      register: vm_disk_result
      when: vm_result.failed == false

    - name: Configure VM Networks
      vmware_guest_network:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        datacenter: "{{ vcenter_datacenter }}"
        name: "{{ vm_name }}"
        networks:
          - name: "{{ vm_network.network.name }}"
            ip: "{{ vm_network.network.ip }}"
            state:  "{{ vm_network.network.state }}"
            device_type:  "{{ vm_network.network.device_type }}"
      loop: "{{ vm_networks }}"
      loop_control:
        loop_var: vm_network
      delegate_to: localhost
      register: vm_network_result
      when: vm_result.failed == false and vm_disk_result == 0

